/*
# Copyright 2017 Pixar
#
# Licensed under the Apache License, Version 2.0 (the "Apache License")
# with the following modification; you may not use this file except in
# compliance with the Apache License and the following modification to it:
# Section 6. Trademarks. is deleted and replaced with:
#
# 6. Trademarks. This License does not grant permission to use the trade
#    names, trademarks, service marks, or product names of the Licensor
#    and its affiliates, except as required to comply with Section 4(c) of
#    the License and to reproduce the content of the NOTICE file.
#
# You may obtain a copy of the Apache License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the Apache License with the above modification is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the Apache License for the specific
# language governing permissions and limitations under the Apache License.
*/

/****************************************************************************/
/*   PxrBump2RoughnessMake                                                  */
/****************************************************************************/


#include "PxrBump2Roughness.h"



shader PxrBump2RoughnessMake
[[
    string category="modifier",
]]
(
    float inputHeight = (0.)
    [[
        string help = "The input height to bump rough",
    ]],
    
    float inputHeightMult = (0.)
    [[
        string help = "Multiplier on to the height input",
    ]],
    
    float inputManifoldS = (0.)
    [[
        string help = "The input s Parameterization",
    ]],
    
    float inputManifoldT = (0.)
    [[
        string help = "The input t Parameterization",
    ]],
    
    
    output float resultHeightMap = float(0.)
    [[
            string widget = "null",
    ]],
    output normal resultBumpNormal = normal(0.)
    [[
            string widget = "null",
    ]],    
    output color resultNormalMap = color(0.)
    [[
            string widget = "null",
    ]],
    output color resultD1 = color(0.)
    [[
            string widget = "null",
    ]],
    output color resultD2 = color(0.)
    [[
            string widget = "null",
    ]]
)
{
        
    vector dQds, dQdt;  //bumped frame
    vector Nn = normalize(N);
    float finalHeight = inputHeightMult*(inputHeight*2.0-1.0);
    vector Pbump = P+finalHeight*Nn;
    
    partialDeriv(Pbump, inputManifoldS, inputManifoldT, dQds, dQdt);
    dQds = normalize(dQds);
    dQdt = normalize(dQdt);
    
    /* dpds may not be northonormal to dPdt, normalization necessary; */
    vector Nbump = normalize(cross(dQds, dQdt));

    
        
    vector dPds, dPdt;  //Current space point, P Frame
    partialDeriv(P, inputManifoldS, inputManifoldT, dPds, dPdt);
    dPds = normalize(dPds);
    dPdt = normalize(dPdt);
    
    float ss = dot(Nbump, dPds);
    float tt = dot(Nbump, dPdt);
    float nn = dot(Nbump, normalize(N));
    
    if (nn < 0){
        //output normals, for vusualization only
        //the slopes, dsdn, dtdn are written in the frames of the manifold
        Nbump = -Nbump;
    }
    
    float d = filterwidth(inputManifoldS)*filterwidth(inputManifoldT);
    d = d*M_PI;
    
    
    resultHeightMap = finalHeight;
    resultBumpNormal = Nbump;
    resultNormalMap = color(ss,tt,nn);
    
    float dsdn = -ss/nn; //slope along s
    float dtdn = -tt/nn; //slopt along t
    
    resultD1= color(dsdn, dtdn, resultHeightMap);
    resultD2= color(dsdn*dsdn, dtdn*dtdn, dsdn*dtdn);
    
}
